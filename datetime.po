# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-03-12 23:41+0100\n"
"PO-Revision-Date: 2016-06-25 17:30+0100\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Poedit 1.6.10\n"

#: ../Doc/library/abc.rst:329 ../Doc/library/cgi.rst:535
#: ../Doc/library/chunk.rst:130 ../Doc/library/configparser.rst:1308
#: ../Doc/library/csv.rst:530 ../Doc/library/datetime.rst:1974
#: ../Doc/library/doctest.rst:1843 ../Doc/library/email.rst:385
#: ../Doc/library/email-examples.rst:76 ../Doc/library/email.encoders.rst:58
#: ../Doc/library/email.generator.rst:231 ../Doc/library/email.parser.rst:304
#: ../Doc/library/email.util.rst:206 ../Doc/library/functions.rst:1592
#: ../Doc/library/gettext.rst:651 ../Doc/library/heapq.rst:298
#: ../Doc/library/html.entities.rst:45 ../Doc/library/json.rst:690
#: ../Doc/library/marshal.rst:113 ../Doc/library/pdb.rst:511
#: ../Doc/library/pickle.rst:903 ../Doc/library/pyexpat.rst:869
#: ../Doc/library/sqlite3.rst:944 ../Doc/library/stdtypes.rst:4611
#: ../Doc/library/time.rst:691 ../Doc/library/unicodedata.rst:168
#: ../Doc/library/webbrowser.rst:210 ../Doc/library/xml.dom.minidom.rst:249
#: ../Doc/library/xml.etree.elementtree.rst:1189
#: ../Doc/library/xmlrpc.client.rst:578
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/argparse.rst:29 ../Doc/library/copyreg.rst:43
#: ../Doc/library/datetime.rst:1809 ../Doc/library/faulthandler.rst:148
#: ../Doc/library/fpectl.rst:72 ../Doc/library/http.cookies.rst:240
#: ../Doc/library/itertools.rst:37 ../Doc/library/itertools.rst:47
#: ../Doc/library/pprint.rst:211 ../Doc/library/pty.rst:53
#: ../Doc/library/pyexpat.rst:526 ../Doc/library/readline.rst:197
#: ../Doc/library/shelve.rst:161 ../Doc/library/signal.rst:439
#: ../Doc/library/socket.rst:1441 ../Doc/library/termios.rst:85
#: ../Doc/library/tkinter.rst:426 ../Doc/library/uuid.rst:219
#: ../Doc/library/weakref.rst:414 ../Doc/library/xml.etree.elementtree.rst:371
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/array.rst:18 ../Doc/library/binhex.rst:47
#: ../Doc/library/datetime.rst:1809 ../Doc/library/stdtypes.rst:90
#: ../Doc/library/stdtypes.rst:276 ../Doc/library/stdtypes.rst:365
#: ../Doc/library/stdtypes.rst:410 ../Doc/library/stdtypes.rst:846
#: ../Doc/library/stdtypes.rst:1039 ../Doc/library/stdtypes.rst:2144
#: ../Doc/library/stdtypes.rst:3241 ../Doc/library/struct.rst:182
#: ../Doc/library/subprocess.rst:1166 ../Doc/library/time.rst:375
#: ../Doc/library/webbrowser.rst:102
msgid "Notes"
msgstr "Notes"

#: ../Doc/library/array.rst:24 ../Doc/library/datetime.rst:881
#: ../Doc/library/datetime.rst:1811 ../Doc/library/datetime.rst:1816
#: ../Doc/library/datetime.rst:1828 ../Doc/library/datetime.rst:1833
#: ../Doc/library/datetime.rst:1892 ../Doc/library/datetime.rst:1897
#: ../Doc/library/datetime.rst:1901 ../Doc/library/stdtypes.rst:92
#: ../Doc/library/stdtypes.rst:286 ../Doc/library/stdtypes.rst:848
#: ../Doc/library/stdtypes.rst:851 ../Doc/library/stdtypes.rst:1050
#: ../Doc/library/stdtypes.rst:2150 ../Doc/library/stdtypes.rst:3247
#: ../Doc/library/struct.rst:192 ../Doc/library/time.rst:408
#: ../Doc/library/webbrowser.rst:116 ../Doc/library/webbrowser.rst:118
#: ../Doc/library/webbrowser.rst:120
msgid "\\(1)"
msgstr "\\(1)"

#: ../Doc/library/array.rst:38 ../Doc/library/array.rst:40
#: ../Doc/library/datetime.rst:883 ../Doc/library/datetime.rst:1844
#: ../Doc/library/stdtypes.rst:95 ../Doc/library/stdtypes.rst:289
#: ../Doc/library/stdtypes.rst:309 ../Doc/library/stdtypes.rst:1078
#: ../Doc/library/stdtypes.rst:2154 ../Doc/library/stdtypes.rst:2156
#: ../Doc/library/stdtypes.rst:3251 ../Doc/library/stdtypes.rst:3253
#: ../Doc/library/time.rst:411 ../Doc/library/webbrowser.rst:136
msgid "\\(2)"
msgstr "\\(2)"

#: ../Doc/library/array.rst:47 ../Doc/library/datetime.rst:290
#: ../Doc/library/datetime.rst:485 ../Doc/library/datetime.rst:1907
#: ../Doc/library/stdtypes.rst:107 ../Doc/library/stdtypes.rst:320
#: ../Doc/library/stdtypes.rst:428 ../Doc/library/stdtypes.rst:887
#: ../Doc/library/stdtypes.rst:1089 ../Doc/library/stdtypes.rst:2190
#: ../Doc/library/stdtypes.rst:3291 ../Doc/library/struct.rst:156
#: ../Doc/library/struct.rst:229 ../Doc/library/subprocess.rst:987
#: ../Doc/library/time.rst:457 ../Doc/library/tkinter.rst:227
#: ../Doc/library/tkinter.ttk.rst:827 ../Doc/library/webbrowser.rst:151
msgid "Notes:"
msgstr "Notes : "

#: ../Doc/library/calendar.rst:314 ../Doc/library/datetime.rst:67
msgid "Module :mod:`time`"
msgstr "Module :mod:`time`"

#: ../Doc/library/codecs.rst:289 ../Doc/library/codecs.rst:304
#: ../Doc/library/codecs.rst:337 ../Doc/library/datetime.rst:218
#: ../Doc/library/dbm.rst:44 ../Doc/library/dbm.rst:153
#: ../Doc/library/dbm.rst:172 ../Doc/library/dbm.rst:265
#: ../Doc/library/difflib.rst:488 ../Doc/library/imghdr.rst:27
#: ../Doc/library/locale.rst:126 ../Doc/library/logging.handlers.rst:315
#: ../Doc/library/urllib.parse.rst:93 ../Doc/library/urllib.parse.rst:209
#: ../Doc/library/urllib.parse.rst:289 ../Doc/library/warnings.rst:124
#: ../Doc/library/zipfile.rst:481
msgid "Value"
msgstr "Valeur"

#: ../Doc/library/codecs.rst:289 ../Doc/library/codecs.rst:304
#: ../Doc/library/codecs.rst:337 ../Doc/library/curses.rst:1274
#: ../Doc/library/curses.rst:1526 ../Doc/library/curses.ascii.rst:15
#: ../Doc/library/datetime.rst:1809 ../Doc/library/dbm.rst:44
#: ../Doc/library/dbm.rst:153 ../Doc/library/dbm.rst:172
#: ../Doc/library/dbm.rst:265 ../Doc/library/difflib.rst:65
#: ../Doc/library/difflib.rst:488 ../Doc/library/fnmatch.rst:21
#: ../Doc/library/functions.rst:899 ../Doc/library/grp.rst:17
#: ../Doc/library/inspect.rst:661 ../Doc/library/locale.rst:61
#: ../Doc/library/mailbox.rst:813 ../Doc/library/mailbox.rst:980
#: ../Doc/library/mailbox.rst:1350 ../Doc/library/profile.rst:372
#: ../Doc/library/pwd.rst:17 ../Doc/library/select.rst:269
#: ../Doc/library/select.rst:373 ../Doc/library/select.rst:489
#: ../Doc/library/select.rst:518 ../Doc/library/select.rst:549
#: ../Doc/library/select.rst:557 ../Doc/library/select.rst:577
#: ../Doc/library/select.rst:600 ../Doc/library/selectors.rst:57
#: ../Doc/library/spwd.rst:20 ../Doc/library/stdtypes.rst:148
#: ../Doc/library/stdtypes.rst:2121 ../Doc/library/stdtypes.rst:2144
#: ../Doc/library/stdtypes.rst:3218 ../Doc/library/stdtypes.rst:3241
#: ../Doc/library/string.rst:319 ../Doc/library/string.rst:344
#: ../Doc/library/string.rst:395 ../Doc/library/string.rst:406
#: ../Doc/library/string.rst:438 ../Doc/library/sys.rst:556
#: ../Doc/library/time.rst:375 ../Doc/library/tkinter.rst:426
#: ../Doc/library/uuid.rst:66 ../Doc/library/winreg.rst:208
#: ../Doc/library/winreg.rst:315 ../Doc/library/winreg.rst:359
#: ../Doc/library/xml.etree.elementtree.rst:403
#: ../Doc/library/xmlrpc.client.rst:84
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/collections.rst:536 ../Doc/library/datetime.rst:1456
#: ../Doc/library/difflib.rst:260 ../Doc/library/fnmatch.rst:80
#: ../Doc/library/sqlite3.rst:333 ../Doc/library/sqlite3.rst:349
#: ../Doc/library/sqlite3.rst:459 ../Doc/library/sqlite3.rst:563
#: ../Doc/library/turtle.rst:2071
msgid "Example:"
msgstr "Exemple :"

#: ../Doc/library/curses.rst:1274 ../Doc/library/datetime.rst:218
#: ../Doc/library/grp.rst:17 ../Doc/library/inspect.rst:37
#: ../Doc/library/pwd.rst:17 ../Doc/library/spwd.rst:20
#: ../Doc/library/sys.rst:695 ../Doc/library/sys.rst:1206
#: ../Doc/library/time.rst:531 ../Doc/library/urllib.parse.rst:93
#: ../Doc/library/urllib.parse.rst:209 ../Doc/library/urllib.parse.rst:289
msgid "Attribute"
msgstr "Attribut"

#: ../Doc/library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- Types basiques date et heure"

#: ../Doc/library/datetime.rst:10
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**Code source :** :source:`Lib/datetime.py`"

#: ../Doc/library/datetime.rst:14
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient attribute "
"extraction for output formatting and manipulation. For related "
"functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""
"Le module :mod:`datetime` fournit des classes pour manipuler des dates et "
"des heures de manières simple ou complexe. Bien que les opérations "
"arithmétiques entre dates et heures soient supportées, le but de "
"l'implémentation est sur l'extraction efficace des attributs pour manipuler "
"et formater. Pour des fonctionnalités connexes, voir aussi les modules :mod:"
"`time` et :mod:`calendar`."

#: ../Doc/library/datetime.rst:20
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr "Il y a deux sortes d'objets date et heure : \"naïf\" et \"conscient\"."

#: ../Doc/library/datetime.rst:22
msgid ""
"An aware object has sufficient knowledge of applicable algorithmic and "
"political time adjustments, such as time zone and daylight saving time "
"information, to locate itself relative to other aware objects.  An aware "
"object is used to represent a specific moment in time that is not open to "
"interpretation [#]_."
msgstr ""
"Un objet conscient a une connaissance des ajustements arithmétique et "
"politiques a appliquer, comme les fuseau horaire ou les heures d'été, pour "
"se situer par rapport aux autres objets conscients. Un objet conscient est "
"utilisé pour représenter un moment spécifique dans le temps qui ne soit pas "
"soumis à interprétation [#]_."

#: ../Doc/library/datetime.rst:28
msgid ""
"A naive object does not contain enough information to unambiguously locate "
"itself relative to other date/time objects.  Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass.  "
"Naive objects are easy to understand and to work with, at the cost of "
"ignoring some aspects of reality."
msgstr ""
"Un objet naïf ne contient pas assez d'information pour se situer par rapport "
"aux autres objets date/heure sans ambiguïté. Qu'un objet naïf représente un "
"Temps Universel Coordonné (UTC), une heure locale ou une heure dans un autre "
"fuseau horaire est la responsabilité du programme, de la même manière qu'il "
"est sa responsabilité qu'un certain nombre représente des mètres, des "
"kilomètres ou une masse. Les objets naïfs sont simples à comprendre et a "
"manipuler, au prix d'ignorer certains aspects de la réalité."

#: ../Doc/library/datetime.rst:35
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:"
"`tzinfo`, that can be set to an instance of a subclass of the abstract :"
"class:`tzinfo` class. These :class:`tzinfo` objects capture information "
"about the offset from UTC time, the time zone name, and whether Daylight "
"Saving Time is in effect.  Note that only one concrete :class:`tzinfo` "
"class, the :class:`timezone` class, is supplied by the :mod:`datetime` "
"module.  The :class:`timezone` class can represent simple timezones with "
"fixed offset from UTC, such as UTC itself or North American EST and EDT "
"timezones.  Supporting timezones at deeper levels of detail is up to the "
"application.  The rules for time adjustment across the world are more "
"political than rational, change frequently, and there is no standard "
"suitable for every application aside from UTC."
msgstr ""
"Pour les applications exigeant des objets conscients, les objets :class:`."
"datetime` et :class:`.time` ont un attribut de fuseau horaire optionnel, :"
"attr:`tzinfo`qui peut être définie comme une instance ou une sous-classe de "
"la classe abstraite :class:`tzinfo`. Ces objets :class:`tzinfo` comportent "
"des informations sur le décalage depuis l'heure UTC, le nom du fuseau "
"horaire, et si l'heure d'été est en vigueur. Notez qu'une seule classe :"
"class:`tzinfo`, la classe :class:`timezone`, est fournie par le module :mod:"
"`datetime`. La classe :class:`timezone` peut représenter de simples fuseaux "
"horaires avec un décalage depuis UTC fixe, comme UTC lui-même ou les fuseaux "
"horaires Nord Americain EST et EDT. Supporter les fuseaux horaires à un "
"niveau plus profond de détail est laissé à l'application. Les règles "
"d'ajustement du temps à travers le monde sont plus politiques que "
"rationnelles, changent fréquemment, et il n'y a pas de norme appropriée pour "
"chaque application en dehors de UTC."

#: ../Doc/library/datetime.rst:48
msgid "The :mod:`datetime` module exports the following constants:"
msgstr "Le module :mod:`datetime` exporte les constantes suivantes :"

#: ../Doc/library/datetime.rst:52
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
"L'année la plus petite autorisée pour un objet :class:`date` ou :class:`."
"datetime`.:const:`MINYEAR` est ``1``."

#: ../Doc/library/datetime.rst:58
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
"L'année la plus grande autorisée pour un objet :class:`date` ou :class:`."
"datetime`.:const:`MAXYEAR` est ``9999``."

#: ../Doc/library/datetime.rst:65 ../Doc/library/time.rst:687
msgid "Module :mod:`calendar`"
msgstr "Module :mod:`calendar`"

#: ../Doc/library/datetime.rst:65
msgid "General calendar related functions."
msgstr "Fonctions générales à propos des calendriers."

#: ../Doc/library/datetime.rst:68
msgid "Time access and conversions."
msgstr "Accès aux heures et conversions."

#: ../Doc/library/datetime.rst:72
msgid "Available Types"
msgstr "Types disponibles"

#: ../Doc/library/datetime.rst:77
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"Une date naïve idéale, supposant que le calendrier grégorien actuel a "
"toujours été, et sera toujours, en vigueur.Attributs : :attr:`year`, :attr:"
"`month` et :attr:`day`."

#: ../Doc/library/datetime.rst:85
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`tzinfo`."
msgstr ""
"Une heure idéale, indépendante de tout jour particulier, supposant que que "
"chaque jour a exactement 24\\*60\\*60 secondes (il n'y a pas de notion de "
"\"seconde intercalaire\" ici). Attributs :attr:`hour`, :attr:`minute`, :attr:"
"`second`, :attr:`microsecond` et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:94
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`tzinfo`."
msgstr ""
"La combinaison d'une date et d'une heure.Attributs : :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond` et :attr:`tzinfo`."

#: ../Doc/library/datetime.rst:102
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
"Une durée exprimant la différence entre deux instances de :class:`date`, :"
"class:`.time` ou :class:`.datetime` avec une résolution de microseconde."

#: ../Doc/library/datetime.rst:108
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"Une classe de base abstraite pour les objets de fuseaux horaires. Ceux-ci "
"sont utilisés par les classes:class:`.datetime` et :class:`.time` pour "
"fournir une notion personnalisable du temps (par exemple, pour tenir compte "
"du fuseau horaire et/ou de l'heure d'été)."

#: ../Doc/library/datetime.rst:115
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""
"Une classe qui implémente la classe de base abstraite :class:`tzinfo` avec "
"un décalage depuis UTC fixe."

#: ../Doc/library/datetime.rst:121
msgid "Objects of these types are immutable."
msgstr "Les objets de ce type sont invariables."

#: ../Doc/library/datetime.rst:123
msgid "Objects of the :class:`date` type are always naive."
msgstr "Les objets de type :class:`date` sont toujours naïfs."

#: ../Doc/library/datetime.rst:125
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be naive or "
"aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not "
"``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d."
"tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo."
"utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* "
"is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` "
"does not return ``None``.  Otherwise, *t* is naive."
msgstr ""
"Un objet de type :class:`.time` ou :class:`.datetime` peut être naïf ou "
"conscient. Un objet :class:`.datetime` *d* est conscient si ``d.tzinfo`` "
"n'est pas ``None`` et ``d.tzinfo.utcoffset(d)`` ne retourne pas ``None``. Si "
"``d.tzinfo`` est ``None``, ou si ``d.tzinfo`` n'est pas ``None`` mais que "
"``d.tzinfo.utcoffset(d)`` retourne ``None``, *d* est naïf. Un objet :class:`."
"time` *t* est conscient si ``t.tzinfo`` n'est pas ``None`` et ``t.tzinfo."
"utcoffset(None)`` ne retourne pas ``None``. Sinon, *t* est naïf."

#: ../Doc/library/datetime.rst:133
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"La distinction entre naïf et conscient ne s'applique pas aux objets :class:"
"`timedelta`."

#: ../Doc/library/datetime.rst:136
msgid "Subclass relationships::"
msgstr "Relations de sous-classes ::"

#: ../Doc/library/datetime.rst:150
msgid ":class:`timedelta` Objects"
msgstr "Objets :class:`timedelta`"

#: ../Doc/library/datetime.rst:152
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""
"Un objet :class:`timedelta` représente une durée, la différence entre deux "
"date ou heures."

#: ../Doc/library/datetime.rst:157
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""
"Tous les arguments sont optionnels et par défaut ``0``. Les arguments "
"peuvent être des nombres entiers ou à virgule flottante, et peuvent être "
"positifs ou négatifs."

#: ../Doc/library/datetime.rst:160
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""
"Seuls *days*, *seconds* et *microseconds* sont enregistrés en interne. Les "
"arguments sont convertis vers ces unités :"

#: ../Doc/library/datetime.rst:163
msgid "A millisecond is converted to 1000 microseconds."
msgstr "Une milliseconde est convertie en 1000 microsecondes."

#: ../Doc/library/datetime.rst:164
msgid "A minute is converted to 60 seconds."
msgstr "Une minute est convertie en 60 secondes."

#: ../Doc/library/datetime.rst:165
msgid "An hour is converted to 3600 seconds."
msgstr "Une heure est convertie en 3600 secondes."

#: ../Doc/library/datetime.rst:166
msgid "A week is converted to 7 days."
msgstr "Une semaine est convertie en 7 jours."

#: ../Doc/library/datetime.rst:168
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"et les jours, secondes et microsecondes sont ensuite normalisés pour que la "
"représentation soit unique, avec"

#: ../Doc/library/datetime.rst:171
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../Doc/library/datetime.rst:172
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= seconds < 3600*24`` (le nombre de secondes dans un jour)"

#: ../Doc/library/datetime.rst:173
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../Doc/library/datetime.rst:175
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker.  If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""

#: ../Doc/library/datetime.rst:182
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""
"Si la valeur normalisée des jours est en dehors des limites indiquées, :exc:"
"`OverflowError` est levée."

#: ../Doc/library/datetime.rst:185
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr ""
"Notez que la normalisation des valeurs négatives peuvent être surprenantes "
"au premier abord. Par exemple,"

#: ../Doc/library/datetime.rst:194
msgid "Class attributes are:"
msgstr "Les attributs de classe sont :"

#: ../Doc/library/datetime.rst:198
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr "L'objet :class:`timedelta` le plus négatif, ``timedelta(-999999999)``."

#: ../Doc/library/datetime.rst:203
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"L'objet :class:`timedelta` le plus positif, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."

#: ../Doc/library/datetime.rst:209
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"La plus petite différence entre deux objets :class:`timedelta` non égaux, "
"``timedelta(microseconds=1)``."

#: ../Doc/library/datetime.rst:212
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"Notez que, à cause de la normalisation, ``timedelta.max`` > ``-timedelta."
"min``. ``-timedelta.max`` n'est pas représentable en tant qu'objet :class:"
"`timedelta`."

#: ../Doc/library/datetime.rst:215 ../Doc/library/datetime.rst:451
#: ../Doc/library/datetime.rst:833 ../Doc/library/datetime.rst:1334
msgid "Instance attributes (read-only):"
msgstr "Attributs d'instance (lecture-seule) :"

#: ../Doc/library/datetime.rst:220
msgid "``days``"
msgstr "``days``"

#: ../Doc/library/datetime.rst:220
msgid "Between -999999999 and 999999999 inclusive"
msgstr "Entre -999999999 et 999999999 inclus"

#: ../Doc/library/datetime.rst:222
msgid "``seconds``"
msgstr "``seconds``"

#: ../Doc/library/datetime.rst:222
msgid "Between 0 and 86399 inclusive"
msgstr "Entre 0 et 86399 inclus"

#: ../Doc/library/datetime.rst:224
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../Doc/library/datetime.rst:224
msgid "Between 0 and 999999 inclusive"
msgstr "Entre 0 et 999999 inclus"

#: ../Doc/library/datetime.rst:227 ../Doc/library/datetime.rst:468
#: ../Doc/library/datetime.rst:876 ../Doc/library/datetime.rst:1362
msgid "Supported operations:"
msgstr "Opérations supportés :"

#: ../Doc/library/datetime.rst:232 ../Doc/library/datetime.rst:471
#: ../Doc/library/datetime.rst:879 ../Doc/library/operator.rst:364
#: ../Doc/library/stdtypes.rst:90 ../Doc/library/stdtypes.rst:148
#: ../Doc/library/stdtypes.rst:276 ../Doc/library/stdtypes.rst:365
#: ../Doc/library/stdtypes.rst:410 ../Doc/library/stdtypes.rst:846
#: ../Doc/library/stdtypes.rst:1039
msgid "Operation"
msgstr "Opération"

#: ../Doc/library/datetime.rst:232 ../Doc/library/datetime.rst:471
#: ../Doc/library/datetime.rst:879 ../Doc/library/stdtypes.rst:90
#: ../Doc/library/stdtypes.rst:276 ../Doc/library/stdtypes.rst:365
#: ../Doc/library/stdtypes.rst:410 ../Doc/library/stdtypes.rst:846
#: ../Doc/library/stdtypes.rst:1039
msgid "Result"
msgstr "Résultat"

#: ../Doc/library/datetime.rst:234
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../Doc/library/datetime.rst:234
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""
"Somme de *t2* et *t3*. Par la suite, *t1*-*t2* == *t3* et *t1*-*t3* == *t2* "
"sont vrai. (1)"

#: ../Doc/library/datetime.rst:237
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../Doc/library/datetime.rst:237
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)"
msgstr ""
"Différence de *t2* et *t3*. Par la suite, *t1* == *t2* - *t3* et *t2* == "
"*t1* + *t3* sont vrai. (1)"

#: ../Doc/library/datetime.rst:241
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: ../Doc/library/datetime.rst:241
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""
"Delta multiplié par un entier. Par la suite, *t1* // i == *t2* est vrai, à "
"condition que ``i != 0``."

#: ../Doc/library/datetime.rst:245
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr "En général, *t1* \\* i == *t1* \\* (i-1) + *t1* est vrai. (1)"

#: ../Doc/library/datetime.rst:248
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f or t1 = f * t2``"

#: ../Doc/library/datetime.rst:248
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../Doc/library/datetime.rst:252
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: ../Doc/library/datetime.rst:252
msgid "Division (3) of *t2* by *t3*.  Returns a :class:`float` object."
msgstr "Division (3) de *t2* et *t3*. Retourne un objet :class:`float`."

#: ../Doc/library/datetime.rst:255
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f or t1 = t2 / i``"

#: ../Doc/library/datetime.rst:255
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../Doc/library/datetime.rst:259
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` or ``t1 = t2 // t3``"

#: ../Doc/library/datetime.rst:259
msgid ""
"The floor is computed and the remainder (if any) is thrown away.  In the "
"second case, an integer is returned. (3)"
msgstr ""

#: ../Doc/library/datetime.rst:263
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: ../Doc/library/datetime.rst:263
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr "Le reste est calculé en tant qu'objet :class:`timedelta`. (3)"

#: ../Doc/library/datetime.rst:266
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: ../Doc/library/datetime.rst:266
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""
"Calcule le quotient et le reste : ``q = t1 // t2`` (3) et ``r = t1 % t2``. q "
"est in entier et r est un objet :class:`timedelta`."

#: ../Doc/library/datetime.rst:271
msgid "``+t1``"
msgstr "``+t1``"

#: ../Doc/library/datetime.rst:271
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr "Retourne un objet :class:`timedelta` avec la même valeur. (2)"

#: ../Doc/library/datetime.rst:274
msgid "``-t1``"
msgstr "``-t1``"

#: ../Doc/library/datetime.rst:274
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""
"équivalent à :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), et à *t1*\\* -1. (1)(4)"

#: ../Doc/library/datetime.rst:278
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../Doc/library/datetime.rst:278
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""
"équivalent à +\\ *t* quand ``t.days >= 0``, et à -*t* quand ``t.days < 0``. "
"(2)"

#: ../Doc/library/datetime.rst:281
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../Doc/library/datetime.rst:281
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"Retourne une chaîne de caractères de la forme ``[D day[s], ][H]H:MM:SS[."
"UUUUUU]``, où D est négatif pour ``t`` négatif. (5)"

#: ../Doc/library/datetime.rst:285
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../Doc/library/datetime.rst:285
msgid ""
"Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"Retourne une chaîne de caractères de la forme ``datetime.timedelta(D[, S[, "
"U]])``, où D est négatif pour ``t`` négatif. (5)"

#: ../Doc/library/datetime.rst:293
msgid "This is exact, but may overflow."
msgstr ""

#: ../Doc/library/datetime.rst:296
msgid "This is exact, and cannot overflow."
msgstr ""

#: ../Doc/library/datetime.rst:299
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "Une division par 0 lève :exc:`ZeroDivisionError`."

#: ../Doc/library/datetime.rst:302
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""
"-*timedelta.max* n'est pas représentable en tant qu'objet :class:`timedelta`."

#: ../Doc/library/datetime.rst:305
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""
"Les représentations en chaîne de caractères des objets :class:`timedelta` "
"sont normalisées de la même manière que leur représentation interne. Ceci "
"peut amener à des résultats surprenants pour des *timedeltas* négatifs. Par "
"exemple :"

#: ../Doc/library/datetime.rst:314
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""
"En plus des opérations listées au dessus, les objets :class:`timedelta` "
"supportent certaines additions et soustractions avec les objets :class:"
"`date` et :class:`.datetime` (voir en dessous)."

#: ../Doc/library/datetime.rst:318
msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function.  True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""

#: ../Doc/library/datetime.rst:325
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""
"Les comparaisons d'objets :class:`timedelta` sont supportés avec l'objet :"
"class:`timedelta` représentant la plus petite durée étant le plus petit "
"timedelta. Afin d'éviter que les comparaisons de types mixtes se rabattent "
"sur la comparaison par défaut d'adresses, quand un objet :class:`timedelta` "
"est comparé à un objet de type différent, :exc:`TypeError` est levé à moins "
"que la comparaison ne soit ``==`` or ``!=``. Ce dernier cas retourne :const:"
"`False` ou :const:`True`, respectivement."

#: ../Doc/library/datetime.rst:333
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""

#: ../Doc/library/datetime.rst:337 ../Doc/library/datetime.rst:518
#: ../Doc/library/datetime.rst:955 ../Doc/library/datetime.rst:1395
msgid "Instance methods:"
msgstr "Méthodes d'instance :"

#: ../Doc/library/datetime.rst:341
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``."
msgstr ""
"Retourne le nombre total de secondes contenues dans la durée. Équivalent à "
"``td / timedelta(seconds=1)``."

#: ../Doc/library/datetime.rst:344
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""
"Notez que pour des intervalles très larges (plus grand que 270 ans sur la "
"plupart des plates-formes) cette méthode perdra sa précision à la "
"microseconde."

#: ../Doc/library/datetime.rst:350
msgid "Example usage:"
msgstr "Exemple d'usage :"

#: ../Doc/library/datetime.rst:376
msgid ":class:`date` Objects"
msgstr "Objets :class:`date`"

#: ../Doc/library/datetime.rst:378
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""
"Un objet :class:`date` représente une date (année, mois, jour) dans un "
"calendrier idéal, le calendrier Grégorien actuel s'étendant de manière "
"infinie dans les deux directions. Le 1er janvier de l'année 1 est appelé "
"jour numéro 1, le 2nd janvier de l'année 1 est appelé jour numéro 2, et "
"ainsi de suite. Ceci correspond à la définition du calendrier \"Grégorien "
"proleptique\" dans le livre de Dershowitz et Reingold Calendrical "
"Calculations, qui est le calendrier de base pour tous les calculs. Voir le "
"livre pour les algorithmes  de conversion entre les ordinaux Gregorien "
"proleptique et beaucoup d'autres calendriers."

#: ../Doc/library/datetime.rst:390
msgid ""
"All arguments are required.  Arguments may be integers, in the following "
"ranges:"
msgstr ""
"Tous les arguments sont requis. Les arguments sont des entier, dans les "
"limites suivantes :"

#: ../Doc/library/datetime.rst:393 ../Doc/library/datetime.rst:686
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../Doc/library/datetime.rst:394 ../Doc/library/datetime.rst:687
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../Doc/library/datetime.rst:395 ../Doc/library/datetime.rst:688
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= number of days in the given month and year``"

#: ../Doc/library/datetime.rst:397 ../Doc/library/datetime.rst:694
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""
"si un argument est en dehors des limites données, :exc:`ValueError` est "
"levée."

#: ../Doc/library/datetime.rst:400 ../Doc/library/datetime.rst:696
msgid "Other constructors, all class methods:"
msgstr "Autres constructeurs, toutes les méthodes de classe :"

#: ../Doc/library/datetime.rst:404
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""
"Retourne la date locale courante. Ceci est un équivalent à ``date."
"fromtimestamp(time.time())``."

#: ../Doc/library/datetime.rst:410
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`localtime` function, and :exc:`OSError` on :c:func:`localtime` failure. "
"It's common for this to be restricted to years from 1970 through 2038.  Note "
"that on non-POSIX systems that include leap seconds in their notion of a "
"timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""
"Retourne la date locale correspondante au *timestamp* POSIX, tel qu'il est "
"retourné par :func:`time.time`. Ceci peut lever :exc:`OverflowError`, si le "
"*timestamp* est en dehors des limites supportées par la fonction c:func:"
"`localtime` de la plate-forme C, et :exc:`OSError` en cas d'échec de :c:func:"
"`localtime`. Il est commun pour cela d'être limité aux années de 1970 à "
"2038. Notez que pour les systèmes non POSIX qui incluent les secondes "
"intercalaires dans leur notion de *timestamp*, les secondes intercalaires "
"sont ignorées par :meth:`fromtimestamp`."

#: ../Doc/library/datetime.rst:418
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""
"Lève :exc:`OverflowError` au lieu de :exc:`ValueError` si le *timestamp* est "
"en dehors des limites supportées par la function :c:func:`localtime` de la "
"plate-forme C. Lève :exc:`OSError` au lieu de :exc:`ValueError` en cas "
"d'échec de :c:func:`localtime`."

#: ../Doc/library/datetime.rst:427
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"Retourne la date correspondant au jour proleptique Gregorien, où le 1er "
"janvier de l'année 1 est le jour 1. :exc:`ValueError` est levée à moins que "
"``1 <= ordinal <= date.max.toordinal()``. Pour n'importe quelle date *d*, "
"``date.fromordinal(d.toordinal()) == d``."

#: ../Doc/library/datetime.rst:433 ../Doc/library/datetime.rst:813
#: ../Doc/library/datetime.rst:1314 ../Doc/library/datetime.rst:1767
msgid "Class attributes:"
msgstr "Attributs de classe :"

#: ../Doc/library/datetime.rst:437
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr "La première date représentable, ``date(MINYEAR, 1, 1)``."

#: ../Doc/library/datetime.rst:442
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr "La dernière date représentable, ``date(MAXYEAR, 12, 31)``."

#: ../Doc/library/datetime.rst:447
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""
"Les plus petite différence possible entre deux objets date non égaux, "
"``timedelta(days=1)``."

#: ../Doc/library/datetime.rst:455 ../Doc/library/datetime.rst:837
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "Entre :const:`MINYEAR` et :const:`MAXYEAR` inclus."

#: ../Doc/library/datetime.rst:460 ../Doc/library/datetime.rst:842
msgid "Between 1 and 12 inclusive."
msgstr "Entre 1 et 12 inclus."

#: ../Doc/library/datetime.rst:465 ../Doc/library/datetime.rst:847
msgid "Between 1 and the number of days in the given month of the given year."
msgstr "Entre 1 et le nombre de jours dans le mois donné de l'année donnée."

#: ../Doc/library/datetime.rst:473
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../Doc/library/datetime.rst:473
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr "*date2* est ``timedelta.days`` jours retirés de *date1*.  (1)"

#: ../Doc/library/datetime.rst:476
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../Doc/library/datetime.rst:476
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr "Calcule *date2* tels que ``date2 + timedelta == date1``. (2)"

#: ../Doc/library/datetime.rst:479
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../Doc/library/datetime.rst:479 ../Doc/library/datetime.rst:885
#: ../Doc/library/stdtypes.rst:98 ../Doc/library/stdtypes.rst:860
#: ../Doc/library/stdtypes.rst:1081 ../Doc/library/stdtypes.rst:2158
#: ../Doc/library/stdtypes.rst:2160 ../Doc/library/stdtypes.rst:2162
#: ../Doc/library/stdtypes.rst:2164 ../Doc/library/stdtypes.rst:3255
#: ../Doc/library/stdtypes.rst:3257 ../Doc/library/stdtypes.rst:3259
#: ../Doc/library/stdtypes.rst:3261 ../Doc/library/struct.rst:190
#: ../Doc/library/struct.rst:194 ../Doc/library/struct.rst:196
#: ../Doc/library/struct.rst:198 ../Doc/library/struct.rst:200
#: ../Doc/library/struct.rst:202 ../Doc/library/struct.rst:204
#: ../Doc/library/time.rst:414 ../Doc/library/time.rst:425
#: ../Doc/library/webbrowser.rst:138 ../Doc/library/webbrowser.rst:140
msgid "\\(3)"
msgstr "\\(3)"

#: ../Doc/library/datetime.rst:481
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../Doc/library/datetime.rst:481
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""
"*date1* est considérée inférieure à *date2* quand *date1* précède *date2* "
"dans le temps. (4)"

#: ../Doc/library/datetime.rst:488
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""
"*date2* est avancée dans le temps si ``timedelta.days > 0``, ou reculée si "
"``timedelta.days < 0``. Après cela, ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` et ``timedelta.microseconds`` sont ignorés. :exc:"
"`OverflowError` est levée si ``date2.year`` serait plus petit que :const:"
"`MINYEAR` ou plus grand que :const:`MAXYEAR`."

#: ../Doc/library/datetime.rst:495
msgid ""
"This isn't quite equivalent to date1 + (-timedelta), because -timedelta in "
"isolation can overflow in cases where date1 - timedelta does not. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../Doc/library/datetime.rst:500
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../Doc/library/datetime.rst:504
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. In order to stop comparison from falling back to the default "
"scheme of comparing object addresses, date comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`date` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison. If not, when a :class:`date` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:515
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""
"Les dates peuvent être utilisées en tant que clés de dictionnaires. Dans un "
"contexte booléen, tous les objets :class:`date` sont considérés vrai."

#: ../Doc/library/datetime.rst:522
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../Doc/library/datetime.rst:529
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""
"Retourne un :class:`time.struct_time` tel que retourné par :func:`time."
"localtime`. Les heures, minutes et secondes sont 0, et le drapeau DST est "
"-1. ``d.timetuple()`` est équivalent à ``time.struct_time((d.year, d.month, "
"d.day, 0, 0, 0, d.weekday(), yday, -1))``, où ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` est le numéro de jour dans l'année "
"courante, commençant à ``1`` pour le 1er janvier."

#: ../Doc/library/datetime.rst:539
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../Doc/library/datetime.rst:546
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""
"Retourne le jour de la semaine en tant qu'entier, où lundi est 0 et dimanche "
"est 6. Par exemple, ``date(2002, 12, 4).weekday() == 2``, un mercredi. Voir "
"aussi :meth:`isoweekday`."

#: ../Doc/library/datetime.rst:553
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""
"Retourne le jour de la semaine en tant qu'entier, où lundi est 1 et dimanche "
"est 7. Par exemple, ``date(2002, 12, 4).isoweekday() == 3``, un mercredi. "
"Voir aussi :meth:`weekday`, :meth:`isocalendar`."

#: ../Doc/library/datetime.rst:560
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""
"Retourne un 3-tuple (année ISO, numéro de semaine ISO, numéro de jour ISO)."

#: ../Doc/library/datetime.rst:562
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good "
"explanation."
msgstr ""
"Le calendrier ISO est largement utilisé en tant que variante du calendrier "
"Grégorien. Voir http://www.staff.science.uu.nl/~gent0113/calendar/"
"isocalendar.htm (en) pour une bonne explication."

#: ../Doc/library/datetime.rst:566
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: ../Doc/library/datetime.rst:571
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""
"Par exemple, 2004 commence un jeudi, donc la première semaine de l'année ISO "
"2004 commence le lundi 29 décembre 2003 et fini le dimanche 4 janvier 2004, "
"tel que ``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` et ``date(2004, "
"1, 4).isocalendar() == (2004, 1, 7)``."

#: ../Doc/library/datetime.rst:579
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""
"Retourne une chaîne de caractères représentant la date en format ISO 8601, "
"'AAAA-MM-JJ'. Par exemple, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."

#: ../Doc/library/datetime.rst:585
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr "Pour une date *d*, ``str(d)`` est équivalent à ``d.isoformat()``."

#: ../Doc/library/datetime.rst:590
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""
"Retourne une chaîne de caractères représentant la date, par exemple "
"``date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` "
"est équivalent à `time.ctime(time.mktime(d.timetuple()))`` sur les plate-"
"formes où la fonction C native :c:func:`ctime` (que :func:`time.ctime` "
"invoque, mais que :meth:`date.ctime` n'invoque pas) est conforme au standard "
"C."

#: ../Doc/library/datetime.rst:599
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:607
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object when using :meth:`str.format`. For a "
"complete list of formatting directives, see :ref:`strftime-strptime-"
"behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:613
msgid "Example of counting days to an event::"
msgstr "Exemple de compte de jours jusqu'à un événement::"

#: ../Doc/library/datetime.rst:631
msgid "Example of working with :class:`date`:"
msgstr "Exemple d'utilisation de la classe :class:`date` :"

#: ../Doc/library/datetime.rst:670
msgid ":class:`.datetime` Objects"
msgstr "Objets :class:`.datetime`"

#: ../Doc/library/datetime.rst:672
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object.  Like "
"a :class:`date` object, :class:`.datetime` assumes the current Gregorian "
"calendar extended in both directions; like a time object, :class:`.datetime` "
"assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""
"Un objet :class:`.datetime` est un objet unique contenant toutes les "
"informations d'un objet :class:`date` et d'un objet :class:`.time`. Comme "
"les objets :class:`date`, :class:`.datetime` suppose que le calendrier "
"Grégorien s'étend dans les deux directions ; comme un objet *time*, :class:`."
"datetime` suppose qu'il y a exactement 3600\\*24 secondes dans chaque jour."

#: ../Doc/library/datetime.rst:678
msgid "Constructor:"
msgstr "Constructeur :"

#: ../Doc/library/datetime.rst:682
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments may "
"be integers, in the following ranges:"
msgstr ""
"Les arguments *year*, *month* et *day* sont requis. *tzinfo* peut être "
"``None``, ou une instance d'une sous-classe de :class:`tzinfo`. Les autres "
"arguments peuvent être des entiers, dans les limites suivantes :"

#: ../Doc/library/datetime.rst:689 ../Doc/library/datetime.rst:1306
msgid "``0 <= hour < 24``"
msgstr "``0 <= hour < 24``"

#: ../Doc/library/datetime.rst:690 ../Doc/library/datetime.rst:1307
msgid "``0 <= minute < 60``"
msgstr "``0 <= minute < 60``"

#: ../Doc/library/datetime.rst:691 ../Doc/library/datetime.rst:1308
msgid "``0 <= second < 60``"
msgstr "``0 <= second < 60``"

#: ../Doc/library/datetime.rst:692
msgid "``0 <= microsecond < 1000000``"
msgstr "``0 <= microsecond < 1000000``"

#: ../Doc/library/datetime.rst:700
msgid ""
"Return the current local datetime, with :attr:`tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""
"Retourne la date régionale courante, avec :attr:`tzinfo` ``None``. Ceci est "
"équivalent à ``datetime.fromtimestamp(time.time())``. Voir aussi :meth:"
"`now`, :meth:`fromtimestamp`."

#: ../Doc/library/datetime.rst:707
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :c:func:`gettimeofday` function)."
msgstr ""
"Retourne les date et heure régionales courantes. Si l'argument optionnel "
"*tz* est ``None`` ou non spécifié, ceci est comme :meth:`today`, mais, si "
"possible, offre plus de précision que ce qui peut être obtenu avec un "
"*timestamp* :func:`time.time` (par exemple, ceci peut être possible sur les "
"plates-formes offrant la fonction C :c:func:`gettimeofday`)."

#: ../Doc/library/datetime.rst:713
msgid ""
"Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the "
"current date and time are converted to *tz*'s time zone.  In this case the "
"result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""
"Sinon, *tz* doit être une instance d'une sous-classe de :class:`tzinfo`, et "
"la date et l'heure courante sont converties vers un fuseau horaire de *tz*. "
"Dans ce cas, le résultat est équivalent à ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. Voir aussi :meth:`today`, :meth:`utcnow`."

#: ../Doc/library/datetime.rst:721
msgid ""
"Return the current UTC date and time, with :attr:`tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`.datetime` object.  An aware current UTC datetime can be obtained by "
"calling ``datetime.now(timezone.utc)``.  See also :meth:`now`."
msgstr ""
"Retourne la date et l'heure courante en UTC, avec :attr:`tzinfo` ``None``. "
"Ceci est comme :meth:`now`, mais retourne la date et l'heure courante en "
"UTC, en tant qu'objet naïf :class:`.datetime`. Une date et heure courante en "
"UTC conscient peut être obtenu en appelant ``datetime.now(timezone.utc)``. "
"Voir aussi :meth:`now`."

#: ../Doc/library/datetime.rst:728
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../Doc/library/datetime.rst:733
msgid ""
"Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the "
"timestamp is converted to *tz*'s time zone.  In this case the result is "
"equivalent to ``tz.fromutc(datetime.utcfromtimestamp(timestamp)."
"replace(tzinfo=tz))``."
msgstr ""

#: ../Doc/library/datetime.rst:738
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""

#: ../Doc/library/datetime.rst:748
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""
"Lève :exc:`OverflowError` au lieu de :exc:`ValueError` si le *timestamp* est "
"en dehors des limites supportées par les fonctions :c:func:`localtime` ou :c:"
"func:`gmtime` de la plate-forme C. Lève :exc:`OSError` au lieu de :exc:"
"`ValueError` pour une erreur de :c:func:`localtime` ou :c:func:`gmtime`."

#: ../Doc/library/datetime.rst:758
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`tzinfo` ``None``. This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`gmtime` function, and :exc:`OSError` on :c:func:`gmtime` failure. It's "
"common for this to be restricted to years in 1970 through 2038."
msgstr ""
"Retourne l'objet :class:`.datetime` UTC correspondant  au *timestamp* POSIX, "
"avec :attr:`tzinfo` à ``None``. Ceci peut lever :exc:`OverflowError`, si le "
"*timestamp* est en dehors des limites supportées par la fonction :c:func:"
"`gmtime` de la plate-forme C, et :exc:`OSError` pour une erreur :c:func:"
"`gmtime`. Il est commun pour cela d'être limité aux années 1970 à 2038."

#: ../Doc/library/datetime.rst:764
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""
"Pour avoir un objet :class:`.datetime` conscient, appeler :meth:"
"`fromtimestamp`::"

#: ../Doc/library/datetime.rst:768
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr ""
"Sur les plate-formes compatibles POSIX, c'est équivalent à l'expression "
"suivante :"

#: ../Doc/library/datetime.rst:773
msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../Doc/library/datetime.rst:776
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""
"Lève :exc:`OverflowError` au lieu de :exc:`ValueError` si le *timestamp* est "
"en dehors des limites supportées par la fonction :c:func:`gmtime` de la "
"plate-forme C. Lève :exc:`OSError`  au lieu de :exc:`ValueError` pour une "
"erreur :c:func:`gmtime`."

#: ../Doc/library/datetime.rst:785
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`tzinfo` "
"is ``None``."
msgstr ""
"Retourne l'objet :class:`.datetime` correspondant au numéro du jour du "
"calendrier grégorien proleptique, où le premier janvier de l'année 1 est "
"numéro 1. :exc:`ValueError` est levé sauf si ``1 <= ordinal <= datetime.max."
"toordinal()``. Les heure, minute, seconde et microseconde du résultat sont "
"tous 0, et :attr:`tzinfo` est ``None``."

#: ../Doc/library/datetime.rst:793
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components and :attr:"
"`tzinfo` attributes are equal to the given :class:`.time` object's. For any :"
"class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"timetz())``.  If date is a :class:`.datetime` object, its time components "
"and :attr:`tzinfo` attributes are ignored."
msgstr ""
"Retourne un nouvel objet :class:`.datetime` dont la date est égale à la :"
"class:`date` de l'objet donné, et dont l'heure et l'attribut :attr:`tzinfo` "
"sont égaux au :class:`.time` de l'objet donné. Pour n'importe quel objet :"
"class:`.datetime`  *d*, ``d == datetime.combine(d.date(), d.timetz())``. Si "
"la date est un objet :class:`.datetime`, son composant heure et sont "
"attribut :attr:`tzinfo` sont ignorés."

#: ../Doc/library/datetime.rst:804
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"Retourne un objet :class:`.datetime` correspondant à *date_string*, parsé en "
"accord avec *format*. Ceci est équivalent à ``datetime(*(time."
"strptime(date_string, format)[0:6]))``. :exc:`ValueError` est levé si la "
"*date_string* et la format ne peuvent être parsés par :func:`time.strptime` "
"ou si cette dernière retourne une valeur qui n'est pas un tuple. Pour une "
"liste complète des directives de format, voir :ref:`strftime-strptime-"
"behavior`."

#: ../Doc/library/datetime.rst:817
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""
"L'objet :class:`.datetime` le plus tôt représentable, ``datetime(MINYEAR, 1, "
"1, tzinfo=None)``."

#: ../Doc/library/datetime.rst:823
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""
"L'objet :class:`.datetime` le plus tard représentable, ``datetime(MAXYEAR, "
"12, 31, 23, 59, 59, 999999, tzinfo=None)``."

#: ../Doc/library/datetime.rst:829
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"La plus petite petite différence possible entre deux objets :class:`."
"datetime` non-égaux, ``timedelta(microseconds=1)``."

#: ../Doc/library/datetime.rst:852 ../Doc/library/datetime.rst:1338
msgid "In ``range(24)``."
msgstr "Dans ``range(24)``."

#: ../Doc/library/datetime.rst:857 ../Doc/library/datetime.rst:862
#: ../Doc/library/datetime.rst:1343 ../Doc/library/datetime.rst:1348
msgid "In ``range(60)``."
msgstr "Dans ``range(60)``."

#: ../Doc/library/datetime.rst:867 ../Doc/library/datetime.rst:1353
msgid "In ``range(1000000)``."
msgstr "Dans ``range(1000000)``."

#: ../Doc/library/datetime.rst:872
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
"L'objet passé en tant qu'argument *tzinfo* au constructeur de :class:`."
"datetime`, ou ``None`` si aucun n'a été passé."

#: ../Doc/library/datetime.rst:881
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../Doc/library/datetime.rst:883
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../Doc/library/datetime.rst:885
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../Doc/library/datetime.rst:887
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../Doc/library/datetime.rst:887
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr "Compare :class:`.datetime` à :class:`.datetime`. (4)"

#: ../Doc/library/datetime.rst:892
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`tzinfo` attribute as the input datetime, and "
"datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if "
"datetime2.year would be smaller than :const:`MINYEAR` or larger than :const:"
"`MAXYEAR`. Note that no time zone adjustments are done even if the input is "
"an aware object."
msgstr ""
"datetime2 est une durée de *timedelta* soustrait à datetime1, avançant dans "
"le temps si ``timedelta.days`` > 0, ou reculant si ``timedelta.days`` < 0. "
"Le résultat a le même attribut :attr:`tzinfo` que l'entré datetime, et par "
"la suite datetime2 - datetime1 == timedelta. :exc:`OverflowError` est levé "
"si datetime2.year serait plus petit que :const:`MINYEAR` ou plus grand que :"
"const:`MAXYEAR`. Notez qu'aucun ajustement de fuseau horaire n'est fait, "
"même si l'entrée est un objet conscient."

#: ../Doc/library/datetime.rst:901
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`tzinfo` attribute as the input "
"datetime, and no time zone adjustments are done even if the input is aware. "
"This isn't quite equivalent to datetime1 + (-timedelta), because -timedelta "
"in isolation can overflow in cases where datetime1 - timedelta does not."
msgstr ""

#: ../Doc/library/datetime.rst:908
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware.  If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""
"La soustraction de deux objets :class:`.datetime` est défini uniquement si "
"les deux opérandes sont naïves, ou si elles sont toutes les deux "
"conscientes. Si l'une est consciente et l'autre naïven, :exc:`TypeError` est "
"levé."

#: ../Doc/library/datetime.rst:912
msgid ""
"If both are naive, or both are aware and have the same :attr:`tzinfo` "
"attribute, the :attr:`tzinfo` attributes are ignored, and the result is a :"
"class:`timedelta` object *t* such that ``datetime2 + t == datetime1``.  No "
"time zone adjustments are done in this case."
msgstr ""

#: ../Doc/library/datetime.rst:917
msgid ""
"If both are aware and have different :attr:`tzinfo` attributes, ``a-b`` acts "
"as if *a* and *b* were first converted to naive UTC datetimes first.  The "
"result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

#: ../Doc/library/datetime.rst:923
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""
"*datetime1* est considéré inférieur à *datetime2* quand *datetime1* précède "
"*datetime2* dans le temps."

#: ../Doc/library/datetime.rst:926
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted.  For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""
"Si une opérande est naïve et l'autre est consciente, :exc:`TypeError` est "
"levée si une comparaison d'ordre est tentée. Pour les comparaisons "
"d'égalité, les instances naïves ne sont jamais égales à des instances "
"conscientes."

#: ../Doc/library/datetime.rst:930
msgid ""
"If both comparands are aware, and have the same :attr:`tzinfo` attribute, "
"the common :attr:`tzinfo` attribute is ignored and the base datetimes are "
"compared.  If both comparands are aware and have different :attr:`tzinfo` "
"attributes, the comparands are first adjusted by subtracting their UTC "
"offsets (obtained from ``self.utcoffset()``)."
msgstr ""
"Si les deux opérandes sont conscientes, et ont le même attribut :attr:"
"`tzinfo`, l'attribut commun :attr:`tzinfo` est ignoré et les temps et heures "
"de base sont comparées. Si les deux opérandes sont conscientes et ont des "
"attributs :attr:`tzinfo` différents, les opérandes sont d'abord ajustées en "
"soustrayant leur offset UTC (obtenus depuis ``self.utcoffset()``)."

#: ../Doc/library/datetime.rst:936
msgid ""
"Equality comparisons between naive and aware :class:`datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""
"Les comparaisons d'égalité entre des instances de :class:`datetime` naïves "
"et conscientes ne lèvent pas :exc:`TypeError`."

#: ../Doc/library/datetime.rst:942
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""
"Afin d'éviter que la comparaison ne retombe sur le défaut qui est la "
"comparaison des adresses des objets, une comparaison avec datetime lève "
"normalement :exc:`TypeError` si l'autre opérande n'est pas aussi un objet :"
"class:`.datetime`. Néanmoins, ``NotImplemented`` est retourné à la place si "
"l'autre opérande possède un attribut :meth:`timetuple`. Cette fonctionnalité "
"donne aux autres objets de représentation de temps le choix d'implémenter "
"des comparaisons de types différents. Si non, quand un objet :class:`."
"datetime` est comparé à un objet d'un type différent, :exc:`TypeError` est "
"levée à moins que la comparaison soit ``==`` ou ``!=``. Ces derniers cas "
"retournent :const:`False` ou :const:`True`, respectivement."

#: ../Doc/library/datetime.rst:952
msgid ""
":class:`.datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""
"Les objets :class:`.datetime` peuvent être utilisés en tant que clé de "
"dictionnaires. Dans les contextes booléens, tous les objets :class:`."
"datetime` sont considérés vrai."

#: ../Doc/library/datetime.rst:959
msgid "Return :class:`date` object with same year, month and day."
msgstr "Retourne un objet :class:`date` avec les même année, mois et jour."

#: ../Doc/library/datetime.rst:964
msgid ""
"Return :class:`.time` object with same hour, minute, second and "
"microsecond. :attr:`tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""
"Retourne un objet :class:`.time` avec les mêmes heure, minutes, secondes et "
"microsecondes. :attr:`tzinfo` est ``None``.  Voir aussi la méthode :meth:"
"`timetz`."

#: ../Doc/library/datetime.rst:970
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"and tzinfo attributes.  See also method :meth:`time`."
msgstr ""
"Retourne un objet :class:`.time` avec les mêmes heure, minutes, secondes, "
"microsecondes et attribut tzinfo.  Voir aussi la méthode :meth:`time`."

#: ../Doc/library/datetime.rst:976
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""
"Retourne une date avec les même attributs, excepté les attributs pour "
"lesquels une valeur est spécifié. Notez que ``tzinfo=None`` peut être "
"spécifié pour créé une date naïve depuis une date consciente sans "
"conversions de date ou d'heure."

#: ../Doc/library/datetime.rst:984
msgid ""
"Return a :class:`datetime` object with new :attr:`tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""
"Retourne un objet :class:`datetime` avec un nouvel attribut :attr:`tzinfo` "
"*tz*, ajustant la date et l'heure pour que le résultat soit la même heure "
"UTC que *self*, mais exprimée en temps localisé *tz*."

#: ../Doc/library/datetime.rst:988
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  "
"*self* must be aware (``self.tzinfo`` must not be ``None``, and ``self."
"utcoffset()`` must not return ``None``)."
msgstr ""
"Si fourni, *tz* doit être une instance d'une sous classe de :class:`tzinfo`, "
"et ses méthodes meth:`utcoffset` et :meth:`dst` ne doivent pas retourner "
"``None``. **self** doit être conscient (``self.tzinfo`` ne doit pas être "
"``None``, et ``self.utcoffset()`` ne doit pas retourner ``None``)."

#: ../Doc/library/datetime.rst:993
msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed.  The ``tzinfo`` attribute of the converted datetime instance "
"will be set to an instance of :class:`timezone` with the zone name and "
"offset obtained from the OS."
msgstr ""
"Si appelé sans arguments (ou avec ``tz=None``) le fuseau horaire du système "
"local est présumé. L'attribut ``tzinfo`` de l'instance datetime convertie "
"aura pour valeur une instance de :class:`timezone` avec le nom du fuseau "
"horaire et l'offset donnés par le système d'exploitation."

#: ../Doc/library/datetime.rst:998
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in time zone *tz*, representing the same UTC time as *self*:  after ``astz = "
"dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same "
"date and time data as ``dt - dt.utcoffset()``. The discussion of class :"
"class:`tzinfo` explains the cases at Daylight Saving Time transition "
"boundaries where this cannot be achieved (an issue only if *tz* models both "
"standard and daylight time)."
msgstr ""

#: ../Doc/library/datetime.rst:1007
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""
"Si vous voulez simplement lier un objet fuseau horaire *tz* à un datetime "
"*dt* sans ajustements des données de date et d'heure, utilisez ``dt."
"replace(tzinfo=tz)``. Si vous voulez simplement retirer l'objet fuseau "
"horaire d'un objet datetime conscient *dt* sans conversion des données de "
"date et d'heure, utilisez ``dt.replace(tzinfo=None)``."

#: ../Doc/library/datetime.rst:1012
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""
"Notez que la méthode par défaut :meth:`tzinfo.fromutc` peut être substitué "
"dans une sous classe :class:`tzinfo` pour modifier le résultat retourné par :"
"meth:`astimezone`. En ignorant les erreurs, :meth:`astimezone` agit comme "
"suit ::"

#: ../Doc/library/datetime.rst:1024
msgid "*tz* now can be omitted."
msgstr "*tz* peut être omis."

#: ../Doc/library/datetime.rst:1030
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None``, or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.utcoffset(self)``, et lève une exception si ce dernier ne retourne "
"pas ``None``, ou un objet :class:`timedelta` représentant un nombre entier "
"de minutes d'une valeur de moins d'un jour."

#: ../Doc/library/datetime.rst:1038
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.dst(self)``, et lève une exception si ce dernier ne retourne pas "
"``None``, ou un objet :class:`timedelta` représentant un nombre entier de "
"minutes d'une valeur de moins d'un jour."

#: ../Doc/library/datetime.rst:1046
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.tzname(self)``, lève une exception si ce dernier ne retourne pas "
"``None``, ou un objet chaîne de caractères,"

#: ../Doc/library/datetime.rst:1053
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr "Retourne "

#: ../Doc/library/datetime.rst:1066
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""
"Si l'instance :class:`.datetime` *d* est naïve, c'est identique à ``d."
"timetuple()`` excepté que :attr:`tm_isdst` est forcé à 0 sans tenir compte "
"de ce que ``d.dst()`` retourne. L'heure d'été n'est jamais utilisée pour une "
"heure UTC."

#: ../Doc/library/datetime.rst:1070
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that an :exc:"
"`OverflowError` may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and "
"UTC adjustment spills over a year boundary."
msgstr ""

#: ../Doc/library/datetime.rst:1080
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""

#: ../Doc/library/datetime.rst:1085
msgid ""
"Return POSIX timestamp corresponding to the :class:`datetime` instance.  The "
"return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""
"Renvoie un *timestamp* POSIX correspondant à l'instance de :class:"
"`datetime`. La valeur renvoyée est un :class:`float` similaire à ce que "
"renvoie :func:`time.time`."

#: ../Doc/library/datetime.rst:1089
msgid ""
"Naive :class:`datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion.  Since :class:`datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` for times far in the past or far in the future."
msgstr ""

#: ../Doc/library/datetime.rst:1096
msgid ""
"For aware :class:`datetime` instances, the return value is computed as::"
msgstr ""
"Pour les instances :class:`datetime` conscientes, la valeur retournée est "
"calculée comme suis ::"

#: ../Doc/library/datetime.rst:1105
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`datetime` instance representing UTC time.  If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

#: ../Doc/library/datetime.rst:1113
msgid "or by calculating the timestamp directly::"
msgstr "ou en calculant le timestamp directement::"

#: ../Doc/library/datetime.rst:1119
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""
"Retourne le jour de la semaine en tant qu'entier, où lundi est 0 et dimanche "
"est 6. Équivalent à ``self.date().weekday()``. Voir aussi :meth:`isoweekday`."

#: ../Doc/library/datetime.rst:1125
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""
"Retourne le jour de la semaine en tant qu'entier, où lundi est 1 et dimanche "
"est 7. Équivalent à ``self.date().isoweekday()``. Voir aussi :meth:"
"`weekday`, :meth:`isocalendar`."

#: ../Doc/library/datetime.rst:1132
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""
"Retourne un 3-tuple, (année ISO, numéro de semaine ISO, jour de la semaine "
"ISO). Équivalent à ``self.date().isocalendar()``."

#: ../Doc/library/datetime.rst:1138
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""
"Retourne une chaîne de caractères représentant la date et l'heure en format "
"ISO 8601, AAAA-MM-JJTHH:MM:SS.mmmmmm, ou si :attr:`microsecond` est 0, AAAA-"
"MM-JJTHH:MM:SS"

#: ../Doc/library/datetime.rst:1142
msgid ""
"If :meth:`utcoffset` does not return ``None``, a 6-character string is "
"appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:"
"MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""
"Si :meth:`utcoffset` ne retourne pas ``None``, une chaîne de 6 caractères "
"est ajoutée, donnant le décalage UTC (signé) en heures et minutes : AAAA-MM-"
"JJTHH:MM:SS.mmmmmm+HH:MM ou, si :attr:`microsecond` est 0 AAAA-MM-JJTHH:MM:SS"
"+HH:MM"

#: ../Doc/library/datetime.rst:1147
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""
"L'argument optionnel *sep* (par défaut ``'T'``) est un unique caractère de "
"séparation, placé entre la date et l'heure. Par exemple,"

#: ../Doc/library/datetime.rst:1160
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""
"Pour une instance *d* de :class:`.datetime` , ``str(d)`` est équivalent à "
"``d.isoformat(' ')``."

#: ../Doc/library/datetime.rst:1166
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""
"Retourne une chaîne de caractères représentant la date et l'heure, par "
"exemple ``datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 "
"2002'``. ``d.ctime()`` est équivalent à ``time.ctime(time.mktime(d."
"timetuple()))`` sur les plate-formes où la fonction C native :c:func:`ctime` "
"(que :func:`time.ctime` invoque, mais que :meth:`datetime.ctime` n'invoquee "
"pas) est conforme au standard C."

#: ../Doc/library/datetime.rst:1175
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"Retourne une chaîne de caractères représentant la date et l'heure, contrôlée "
"par une chaîne de formatage. Pour une liste complète des directives de "
"formatage, voir :ref:`strftime-strptime-behavior`."

#: ../Doc/library/datetime.rst:1182
msgid ""
"Same as :meth:`.datetime.strftime`.  This makes it possible to specify a "
"format string for a :class:`.datetime` object when using :meth:`str."
"format`.  For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

#: ../Doc/library/datetime.rst:1188
msgid "Examples of working with datetime objects:"
msgstr "Exemple d'utilisation d'objets de date :"

#: ../Doc/library/datetime.rst:1235
msgid "Using datetime with tzinfo:"
msgstr "Utilisation de date avec tzinfo :"

#: ../Doc/library/datetime.rst:1295
msgid ":class:`time` Objects"
msgstr "Objets :class:`time`"

#: ../Doc/library/datetime.rst:1297
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../Doc/library/datetime.rst:1302
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments may be integers, in the "
"following ranges:"
msgstr ""

#: ../Doc/library/datetime.rst:1309
msgid "``0 <= microsecond < 1000000``."
msgstr "``0 <= microsecond < 1000000``."

#: ../Doc/library/datetime.rst:1311
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../Doc/library/datetime.rst:1319
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../Doc/library/datetime.rst:1324
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../Doc/library/datetime.rst:1329
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""

#: ../Doc/library/datetime.rst:1358
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""

#: ../Doc/library/datetime.rst:1364
msgid ""
"comparison of :class:`.time` to :class:`.time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised if an order comparison is "
"attempted. For equality comparisons, naive instances are never equal to "
"aware instances."
msgstr ""

#: ../Doc/library/datetime.rst:1369
msgid ""
"If both comparands are aware, and have the same :attr:`tzinfo` attribute, "
"the common :attr:`tzinfo` attribute is ignored and the base times are "
"compared.  If both comparands are aware and have different :attr:`tzinfo` "
"attributes, the comparands are first adjusted by subtracting their UTC "
"offsets (obtained from ``self.utcoffset()``). In order to stop mixed-type "
"comparisons from falling back to the default comparison by object address, "
"when a :class:`.time` object is compared to an object of a different type, :"
"exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The "
"latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1379
msgid ""
"Equality comparisons between naive and aware :class:`time` instances don't "
"raise :exc:`TypeError`."
msgstr ""

#: ../Doc/library/datetime.rst:1383
msgid "hash, use as dict key"
msgstr ""

#: ../Doc/library/datetime.rst:1385
msgid "efficient pickling"
msgstr ""

#: ../Doc/library/datetime.rst:1387
msgid ""
"In boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""
"Dans les contextes booléens, un objet :class:`.time` est toujours considéré "
"être vrai."

#: ../Doc/library/datetime.rst:1389
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC.  This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5.  See :issue:`13936` for full "
"details."
msgstr ""
"Avant Python 3.5, un objet :class:`.time` était considéré faux si il "
"représentait minuit UTC. Ce comportement était considéré obscure et sujet à "
"des erreurs et a été retiré en Python 3.5. Voir :issue:`13936` pour plus de "
"détails."

#: ../Doc/library/datetime.rst:1399
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""
"Retourne un objet :class:`.time` avec les mêmes valeurs, sauf pour les "
"attributs pour lesquels une nouvelle valeur a été spécifiée. Notez que "
"``tzinfo=None`` peut être spécifié pour créer un objet :class:`.time` naïf "
"depuis un objet :class:`.time` conscient, sans conversion des données "
"d'heure."

#: ../Doc/library/datetime.rst:1407
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm "
"or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return "
"``None``, a 6-character string is appended, giving the UTC offset in "
"(signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is "
"0, HH:MM:SS+HH:MM"
msgstr ""
"Retourne une chaîne de caractères représentant l'heure dans le format ISO "
"8601, HH:MM:SS.mmmmmm ou, si self.microsecond est 0, HH:MM:SS. Si :meth:"
"`utcoffset` ne retourne pas ``None``, une chaîne de 6 caractères est ajouté, "
"donnant l'offset UTC en heures et minutes (signé) : HH:MM:SS.mmmmmm+HH:MM "
"ou, si self.microsecond est 0, HH:MM:SS+HH:MM"

#: ../Doc/library/datetime.rst:1415
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr "Pour une heure *t*, ``str(t)`` est équivalent à ``t.isoformat()``."

#: ../Doc/library/datetime.rst:1420
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string.  For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""
"Retourne une chaîne de caractères représentant l'heure, contrôlée par un "
"format explicite. Pour une liste complète des directives de formatage, voir :"
"ref:`strftime-strptime-behavior`."

#: ../Doc/library/datetime.rst:1427
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object when using :meth:`str.format`.  For a "
"complete list of formatting directives, see :ref:`strftime-strptime-"
"behavior`."
msgstr ""
"Identique à :meth:`.time.strftime`. Ceci rend possible le fait de spécifier "
"un format pour un objet :class:`.time` lorsque :meth:`str.format` est "
"utilisé. Pour une liste complète des directives de formatage, voir :ref:"
"`strftime-strptime-behavior`."

#: ../Doc/library/datetime.rst:1435
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.utcoffset(None)``, et lève une exception si ce dernier ne retourne "
"pas ``None``, ou un objet :class:`timedelta` représentant un nombre entier "
"de minutes inférieur à un jour."

#: ../Doc/library/datetime.rst:1443
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.dst(None)``, et lève une exception si ce dernier ne retourne pas "
"``None``, ou un objet :class:`timedelta` représentant un nombre entier de "
"minutes inférieur à un jour."

#: ../Doc/library/datetime.rst:1451
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""
"Si :attr:`tzinfo` est ``None``, retourne ``None``, sinon retourne ``self."
"tzinfo.tzname(None)``, ou lève une exception si ce dernier ne retourne pas "
"``None`` ou un objet chaîne de caractères."

#: ../Doc/library/datetime.rst:1486
msgid ":class:`tzinfo` Objects"
msgstr "Objets :class:`tzinfo`"

#: ../Doc/library/datetime.rst:1488
msgid ""
":class:`tzinfo` is an abstract base class, meaning that this class should "
"not be instantiated directly.  You need to derive a concrete subclass, and "
"(at least) supply implementations of the standard :class:`tzinfo` methods "
"needed by the :class:`.datetime` methods you use.  The :mod:`datetime` "
"module supplies a simple concrete subclass of :class:`tzinfo` :class:"
"`timezone` which can represent timezones with fixed offset from UTC such as "
"UTC itself or North American EST and EDT."
msgstr ""
":class:`tzinfo` est une classe de base abstraite, signifiant que cette "
"classe ne devrait pas être instanciée directement. Vous avez besoin de "
"dériver une sous-classe, et (au moins) implémenter les méthodes standards :"
"class:`tzinfo` requises par les méthodes de :class:`.datetime` que vous "
"utilisez. Le module :mod:`datetime` fourni une sous-classe simple de :class:"
"`tzinfo` :class:`timezone` qui peut représenter des fuseaux horaires avec un "
"offset UTC tel que UTC lui-même ou les fuseaux nord-américains EST et EDT."

#: ../Doc/library/datetime.rst:1496
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""
"Une instance (d'une sous-classe) de :class:`tzinfo` peut être passée aux "
"constructeurs pour les objets :class:`.datetime` et :class:`.time`. Ce "
"dernier voir ses attributs en tant qu'heure locale, et les objets :class:"
"`tzinfo` supportent les méthodes révélant l'offset de l'heure locale depuis "
"UTC, le nom de du fuseau horaire, et l'offset DST, tous relatifs à la date "
"ou l'heure de l'objet passé."

#: ../Doc/library/datetime.rst:1502
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""

#: ../Doc/library/datetime.rst:1507
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""
"Une sous-classe de :class:`tzinfo` peut avoir besoin d'implémenter les "
"méthodes suivantes. Les méthodes requises dépend de l'utilisation faite des "
"objets conscients :mod:`datetime`. En cas de doute, les implémenter toutes."

#: ../Doc/library/datetime.rst:1514
msgid ""
"Return offset of local time from UTC, in minutes east of UTC.  If local time "
"is west of UTC, this should be negative.  Note that this is intended to be "
"the total offset from UTC; for example, if a :class:`tzinfo` object "
"represents both time zone and DST adjustments, :meth:`utcoffset` should "
"return their sum.  If the UTC offset isn't known, return ``None``.  Else the "
"value returned must be a :class:`timedelta` object specifying a whole number "
"of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the "
"magnitude of the offset must be less than one day).  Most implementations "
"of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""
"Retourne l'offset depuis UTC de l'heure régionale, en minutes vers l'est "
"d'UTC. Si l'heure régionale est à l'ouest d'UTC, il devrait être négatif. "
"Notez qu'il est attendu que cela soit l'offset total depuis UTC ; par "
"exemple, si un objet :class:`tzinfo` représente à la fois un fuseau horaire "
"et un ajustement d'heure d'été, :meth:`utcoffset` devrait retourner leur "
"somme. Si l'offset UTC n'est pas connu, retourne ``None``. Sinon la valeur "
"retournée doit être un objet :class:`timedelta` spécifiant un nombre entier "
"de minutes dans l’intervalle -1439 à 1439 inclus (1440 = 24\\*60; la valeur "
"de l'offset doit être de moins d'un jour). La plupart des implémentations "
"de :meth:`utcoffset` vont probablement ressembler à l'une de ces deux ::"

#: ../Doc/library/datetime.rst:1527
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""
"Si :meth:`utcoffset` ne retourne pas ``None``, :meth:`dst` ne devrait pas "
"retourner ``None`` non plus."

#: ../Doc/library/datetime.rst:1530
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""
"L'implémentation par défaut de :meth:`utcoffset` lève :exc:"
"`NotImplementedError`."

#: ../Doc/library/datetime.rst:1536
msgid ""
"Return the daylight saving time (DST) adjustment, in minutes east of UTC, or "
"``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is "
"not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`tzinfo` attribute's :meth:`dst` method to "
"determine how the :attr:`tm_isdst` flag should be set, and :meth:`tzinfo."
"fromutc` calls :meth:`dst` to account for DST changes when crossing time "
"zones."
msgstr ""

#: ../Doc/library/datetime.rst:1547
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""
"Une instance *tz* d'une sous-classe de :class:`tzinfo` qui implémente les "
"deux heures standard et heure d'été doit être consistante dans ce sens :"

#: ../Doc/library/datetime.rst:1550
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../Doc/library/datetime.rst:1552
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

#: ../Doc/library/datetime.rst:1561
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""
"La plupart des implémentations de :meth:`dst`ressembleront probablement à "
"l'une de ces deux :"

#: ../Doc/library/datetime.rst:1567
msgid "or ::"
msgstr "ou : ::"

#: ../Doc/library/datetime.rst:1579
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""
"L'implémentation par défaut de meth:`dst` lève :exc:`NotImplementedError`."

#: ../Doc/library/datetime.rst:1584
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../Doc/library/datetime.rst:1594
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."

#: ../Doc/library/datetime.rst:1597
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names.  A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""

#: ../Doc/library/datetime.rst:1603
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""

#: ../Doc/library/datetime.rst:1609
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly.  The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""

#: ../Doc/library/datetime.rst:1615
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

#: ../Doc/library/datetime.rst:1620
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time.  The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

#: ../Doc/library/datetime.rst:1626
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../Doc/library/datetime.rst:1637
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""
"En ignorant le code pour la gestion d'ereurs, l'implémentation par défaut "
"de :meth:`fromutc` agit comme suit :"

#: ../Doc/library/datetime.rst:1655
msgid "Example :class:`tzinfo` classes:"
msgstr "Exemple de classes :class:`tzinfo` :"

#: ../Doc/library/datetime.rst:1659
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../Doc/library/datetime.rst:1673
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  In order for :meth:`astimezone` to make this guarantee, "
"the :meth:`tzinfo.dst` method must consider times in the \"missing hour\" (2:"
"MM for Eastern) to be in daylight time."
msgstr ""

#: ../Doc/library/datetime.rst:1680
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern.  In order for :meth:`astimezone` to make this "
"guarantee, the :meth:`tzinfo.dst` method must consider times in the "
"\"repeated hour\" to be in standard time.  This is easily arranged, as in "
"the example, by expressing DST switch times in the time zone's standard "
"local time."
msgstr ""

#: ../Doc/library/datetime.rst:1693
msgid ""
"Applications that can't bear such ambiguities should avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""

#: ../Doc/library/datetime.rst:1705
msgid "`pytz <https://pypi.python.org/pypi/pytz/>`_"
msgstr "`pytz <https://pypi.python.org/pypi/pytz/>`_"

#: ../Doc/library/datetime.rst:1701
msgid ""
"The standard library has :class:`timezone` class for handling arbitrary "
"fixed offsets from UTC and :attr:`timezone.utc` as UTC timezone instance."
msgstr ""

#: ../Doc/library/datetime.rst:1704
msgid ""
"*pytz* library brings the *IANA timezone database* (also known as the Olson "
"database) to Python and its usage is recommended."
msgstr ""
"La bibliothèque *pytz* apporte la base de donnée IANA (*IANA timezone "
"database* - aussi connu sous le nom de base de données Olson) à Python et "
"son usage est recommandé. "

#: ../Doc/library/datetime.rst:1711
msgid "`IANA timezone database <http://www.iana.org/time-zones>`_"
msgstr "`base de données IANA <http://www.iana.org/time-zones>`_"

#: ../Doc/library/datetime.rst:1708
msgid ""
"The Time Zone Database (often called tz or zoneinfo) contains code and data "
"that represent the history of local time for many representative locations "
"around the globe. It is updated periodically to reflect changes made by "
"political bodies to time zone boundaries, UTC offsets, and daylight-saving "
"rules."
msgstr ""

#: ../Doc/library/datetime.rst:1718
msgid ":class:`timezone` Objects"
msgstr "Objets :class:`timezone`"

#: ../Doc/library/datetime.rst:1720
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC.  Note "
"that objects of this class cannot be used to represent timezone information "
"in the locations where different offsets are used in different days of the "
"year or where historical changes have been made to civil time."
msgstr ""

#: ../Doc/library/datetime.rst:1730
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC.  It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` and "
"represent a whole number of minutes, otherwise :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/datetime.rst:1736
msgid ""
"The *name* argument is optional.  If specified it must be a string that is "
"used as the value returned by the ``tzname(dt)`` method.  Otherwise, "
"``tzname(dt)`` returns a string 'UTCsHH:MM', where s is the sign of "
"*offset*, HH and MM are two digits of ``offset.hours`` and ``offset."
"minutes`` respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1746
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed.  The *dt* argument is ignored.  The return value is a :class:"
"`timedelta` instance equal to the difference between the local time and UTC."
msgstr ""

#: ../Doc/library/datetime.rst:1753
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed or a string 'UTCsHH:MM', where s is the sign of *offset*, HH and "
"MM are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

#: ../Doc/library/datetime.rst:1760
msgid "Always returns ``None``."
msgstr "Retourne toujours ``None``."

#: ../Doc/library/datetime.rst:1764
msgid ""
"Return ``dt + offset``.  The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

#: ../Doc/library/datetime.rst:1771
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

#: ../Doc/library/datetime.rst:1777
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

#: ../Doc/library/datetime.rst:1779
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""
"Les objets :class:`date`, :class:`.datetime`, et :class:`.time` supportent "
"tous une méthode ``strftime(format)``, pour créer une chaîne de caractères "
"représentant l'heure en fonction d'un format explicite. Plus généralement "
"parlant, ``d.strftime(fmt)`` agit comme ``time.strftime(fmt, d."
"timetuple())`` du module :mod:`time` même si tous les objets ne supportent "
"pas la méthode :meth:`timetuple`."

#: ../Doc/library/datetime.rst:1785
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""
"Inversement, la méthode de classe :meth:`datetime.strptime` crée un objet :"
"class:`.datetime` depuis une chaîne de caractères représentant une date et "
"heure et un format correspondant. ``datetime.strptime(date_string, format)`` "
"est équivalent à ``datetime(*(time.strptime(date_string, format)[0:6]))``."

#: ../Doc/library/datetime.rst:1790
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""
"Pour les objets :class:`.time`, les formats pour l'année, le mois et le jour "
"ne devraient pas être utilisés, car les objets heure n'ont pas de telles "
"valeurs. S'ils sont tout de même utilisés, ``1900`` remplace l'année et "
"``1`` le mois et le jour."

#: ../Doc/library/datetime.rst:1794
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""
"Pour les objets :class:`date`, les formats pour les heures, minutes, "
"secondes et microsecondes ne devraient pas être utilisés, car les objets :"
"class:`date` n'ont pas de telles valeurs. S'ils sont quand même utilisés, "
"``0`` les remplace."

#: ../Doc/library/datetime.rst:1798
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common.  To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""
"L'ensemble des formats supportés varie en fonction des plate-formes, car "
"Python appelle la fonction :func:`strftime` de la plate-forme C et les "
"variations de plate-forme sont courantes. Pour l'ensemble complet des "
"formats supportés sur votre plate-forme, consultez la documentation  :"
"manpage:`strftime(3)`."

#: ../Doc/library/datetime.rst:1803
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""
"Voici la liste de tous les formats requis par le C standard (version de "
"1989) et qui fonctionnent sur une plate-forme avec une implémentation C "
"standard. Notez que la version de 1999 du standard C ajoute des formats "
"additionnels."

#: ../Doc/library/datetime.rst:1809 ../Doc/library/time.rst:375
msgid "Directive"
msgstr "Directive"

#: ../Doc/library/datetime.rst:1811 ../Doc/library/time.rst:377
msgid "``%a``"
msgstr "``%a``"

#: ../Doc/library/datetime.rst:1811
msgid "Weekday as locale's abbreviated name."
msgstr "Jour de la semaine en tant que son nom régional abrégé."

#: ../Doc/library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "So, Mo, ..., Sa (de_DE)"

#: ../Doc/library/datetime.rst:1816 ../Doc/library/time.rst:380
msgid "``%A``"
msgstr "``%A``"

#: ../Doc/library/datetime.rst:1816
msgid "Weekday as locale's full name."
msgstr "Jour de la semaine en tant que son nom régional complet."

#: ../Doc/library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Sonntag, Montag, ..., Samstag (de_DE)"

#: ../Doc/library/datetime.rst:1821 ../Doc/library/time.rst:422
msgid "``%w``"
msgstr "``%w``"

#: ../Doc/library/datetime.rst:1821
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"Jour de la semaine en tant que nombre décimal, où 0 est dimanche et 6 est "
"samedi."

#: ../Doc/library/datetime.rst:1821
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../Doc/library/datetime.rst:1825 ../Doc/library/re.rst:1195
#: ../Doc/library/time.rst:390
msgid "``%d``"
msgstr "``%d``"

#: ../Doc/library/datetime.rst:1825
msgid "Day of the month as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1825
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../Doc/library/datetime.rst:1828 ../Doc/library/time.rst:382
msgid "``%b``"
msgstr "``%b``"

#: ../Doc/library/datetime.rst:1828
msgid "Month as locale's abbreviated name."
msgstr "Mois en tant que son nom régional abrégé."

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr "Jan, Feb, ..., Dec (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr "Jan, Feb, ..., Dez (de_DE)"

#: ../Doc/library/datetime.rst:1833 ../Doc/library/time.rst:385
msgid "``%B``"
msgstr "``%B``"

#: ../Doc/library/datetime.rst:1833
msgid "Month as locale's full name."
msgstr "Mois en tant que son nom régional complet."

#: ../Doc/library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr "January, February, ..., December (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr "Januar, Februar, ..., Dezember (de_DE)"

#: ../Doc/library/datetime.rst:1838 ../Doc/library/time.rst:402
msgid "``%m``"
msgstr "``%m``"

#: ../Doc/library/datetime.rst:1838
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1838 ../Doc/library/datetime.rst:1850
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../Doc/library/datetime.rst:1841 ../Doc/library/time.rst:439
msgid "``%y``"
msgstr "``%y``"

#: ../Doc/library/datetime.rst:1841
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1841
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../Doc/library/datetime.rst:1844 ../Doc/library/time.rst:442
msgid "``%Y``"
msgstr "``%Y``"

#: ../Doc/library/datetime.rst:1844 ../Doc/library/time.rst:442
msgid "Year with century as a decimal number."
msgstr "Année sans le siècle en tant que nombre décimal."

#: ../Doc/library/datetime.rst:1844
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"

#: ../Doc/library/datetime.rst:1847 ../Doc/library/time.rst:393
msgid "``%H``"
msgstr "``%H``"

#: ../Doc/library/datetime.rst:1847
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1847
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../Doc/library/datetime.rst:1850 ../Doc/library/time.rst:396
msgid "``%I``"
msgstr "``%I``"

#: ../Doc/library/datetime.rst:1850
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1853 ../Doc/library/time.rst:408
msgid "``%p``"
msgstr "``%p``"

#: ../Doc/library/datetime.rst:1853 ../Doc/library/time.rst:408
msgid "Locale's equivalent of either AM or PM."
msgstr "Équivalent régional de AM ou PM."

#: ../Doc/library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: ../Doc/library/datetime.rst:1853
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: ../Doc/library/datetime.rst:1856 ../Doc/library/time.rst:405
msgid "``%M``"
msgstr "``%M``"

#: ../Doc/library/datetime.rst:1856
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1856 ../Doc/library/datetime.rst:1859
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../Doc/library/datetime.rst:1859 ../Doc/library/time.rst:411
msgid "``%S``"
msgstr "``%S``"

#: ../Doc/library/datetime.rst:1859
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1859 ../Doc/library/stdtypes.rst:1084
#: ../Doc/library/stdtypes.rst:2166 ../Doc/library/stdtypes.rst:2170
#: ../Doc/library/stdtypes.rst:3263 ../Doc/library/stdtypes.rst:3267
#: ../Doc/library/struct.rst:211 ../Doc/library/struct.rst:213
msgid "\\(4)"
msgstr "\\(4)"

#: ../Doc/library/datetime.rst:1862
msgid "``%f``"
msgstr "``%f``"

#: ../Doc/library/datetime.rst:1862
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr ""

#: ../Doc/library/datetime.rst:1862
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../Doc/library/datetime.rst:1862 ../Doc/library/stdtypes.rst:311
#: ../Doc/library/stdtypes.rst:313 ../Doc/library/stdtypes.rst:1060
#: ../Doc/library/stdtypes.rst:1063 ../Doc/library/stdtypes.rst:2177
#: ../Doc/library/stdtypes.rst:2180 ../Doc/library/stdtypes.rst:2183
#: ../Doc/library/stdtypes.rst:3274 ../Doc/library/stdtypes.rst:3281
#: ../Doc/library/struct.rst:215 ../Doc/library/struct.rst:217
msgid "\\(5)"
msgstr "\\(5)"

#: ../Doc/library/datetime.rst:1866 ../Doc/library/datetime.rst:1957
#: ../Doc/library/time.rst:445
msgid "``%z``"
msgstr "``%z``"

#: ../Doc/library/datetime.rst:1866
msgid ""
"UTC offset in the form +HHMM or -HHMM (empty string if the the object is "
"naive)."
msgstr ""
"Offset UTC dans le format +HHMM ou -HHMM (chaîne de caractères vide si "
"l'objet est naïf)."

#: ../Doc/library/datetime.rst:1866
msgid "(empty), +0000, -0400, +1030"
msgstr "(empty), +0000, -0400, +1030"

#: ../Doc/library/datetime.rst:1866 ../Doc/library/stdtypes.rst:302
#: ../Doc/library/stdtypes.rst:1071 ../Doc/library/stdtypes.rst:3278
#: ../Doc/library/struct.rst:223
msgid "\\(6)"
msgstr "\\(6)"

#: ../Doc/library/datetime.rst:1870 ../Doc/library/datetime.rst:1962
#: ../Doc/library/time.rst:451
msgid "``%Z``"
msgstr "``%Z``"

#: ../Doc/library/datetime.rst:1870
msgid "Time zone name (empty string if the object is naive)."
msgstr "Nom du fuseau horaire (chaîne de caractères vide si l'objet est naïf)."

#: ../Doc/library/datetime.rst:1870
msgid "(empty), UTC, EST, CST"
msgstr "(empty), UTC, EST, CST"

#: ../Doc/library/datetime.rst:1873 ../Doc/library/time.rst:399
msgid "``%j``"
msgstr "``%j``"

#: ../Doc/library/datetime.rst:1873
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../Doc/library/datetime.rst:1873
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../Doc/library/datetime.rst:1876 ../Doc/library/time.rst:414
msgid "``%U``"
msgstr "``%U``"

#: ../Doc/library/datetime.rst:1876
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../Doc/library/datetime.rst:1876 ../Doc/library/datetime.rst:1884
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../Doc/library/datetime.rst:1876 ../Doc/library/datetime.rst:1884
#: ../Doc/library/stdtypes.rst:2152 ../Doc/library/stdtypes.rst:3284
msgid "\\(7)"
msgstr "\\(7)"

#: ../Doc/library/datetime.rst:1884 ../Doc/library/time.rst:425
msgid "``%W``"
msgstr "``%W``"

#: ../Doc/library/datetime.rst:1884
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr ""
"Numéro de semaine dans l'année (lundi étant le premier jour de la semaine) "
"en tant que nombre décimal. Tous les jours de la nouvelle année précédant le "
"premier lundi sont considérés comme semaine 0."

#: ../Doc/library/datetime.rst:1892 ../Doc/library/re.rst:1191
#: ../Doc/library/time.rst:387
msgid "``%c``"
msgstr "``%c``"

#: ../Doc/library/datetime.rst:1892 ../Doc/library/time.rst:387
msgid "Locale's appropriate date and time representation."
msgstr ""
"Représentation appropriée de la date et de l'heure selon la localisation."

#: ../Doc/library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr "Tue Aug 16 21:30:00 1988 (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr "Di 16 Aug 21:30:00 1988 (de_DE)"

#: ../Doc/library/datetime.rst:1897 ../Doc/library/time.rst:433
msgid "``%x``"
msgstr "``%x``"

#: ../Doc/library/datetime.rst:1897 ../Doc/library/time.rst:433
msgid "Locale's appropriate date representation."
msgstr "Représentation appropriée de la date selon la localisation."

#: ../Doc/library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr "08/16/88 (None);"

#: ../Doc/library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr "08/16/1988 (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr "16.08.1988 (de_DE)"

#: ../Doc/library/datetime.rst:1901 ../Doc/library/time.rst:436
msgid "``%X``"
msgstr "``%X``"

#: ../Doc/library/datetime.rst:1901 ../Doc/library/time.rst:436
msgid "Locale's appropriate time representation."
msgstr "Représentation appropriée de l'heure selon la localisation."

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr "21:30:00 (en_US);"

#: ../Doc/library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr "21:30:00 (de_DE)"

#: ../Doc/library/datetime.rst:1904 ../Doc/library/time.rst:454
msgid "``%%``"
msgstr "``%%``"

#: ../Doc/library/datetime.rst:1904 ../Doc/library/time.rst:454
msgid "A literal ``'%'`` character."
msgstr "A literal ``'%'`` character."

#: ../Doc/library/datetime.rst:1904
msgid "%"
msgstr "%"

#: ../Doc/library/datetime.rst:1910
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""

#: ../Doc/library/datetime.rst:1919
msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but "
"years < 1000 must be zero-filled to 4-digit width."
msgstr ""

#: ../Doc/library/datetime.rst:1922
msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr ""

#: ../Doc/library/datetime.rst:1926
msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""

#: ../Doc/library/datetime.rst:1931
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../Doc/library/datetime.rst:1935
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""

#: ../Doc/library/datetime.rst:1939
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right.  ``%f`` is an extension "
"to the set of format characters in the C standard (but implemented "
"separately in datetime objects, and therefore always available)."
msgstr ""

#: ../Doc/library/datetime.rst:1946
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""
"Pour un objet naïf, les formats ``%z`` et ``%Z`` sont remplacés par des "
"chaînes de caractères vides."

#: ../Doc/library/datetime.rst:1949
msgid "For an aware object:"
msgstr "Pour un objet conscient :"

#: ../Doc/library/datetime.rst:1952
msgid ""
":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM "
"or -HHMM, where HH is a 2-digit string giving the number of UTC offset "
"hours, and MM is a 2-digit string giving the number of UTC offset minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""
":meth:`utcoffset` est transformé en une chaîne de 5 caractères au forma "
"+HHMM ou -HHMM, où HH est une chaîne de 2 caractères donnant l'offset UTC "
"des heures, et MM est une chaîne de 2 caractères donnant l'offset UTC des "
"minutes. Par exemple, si :meth:`utcoffset` retourne ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` est remplacé par la chaîne de caractères ``'-0330'``."

#: ../Doc/library/datetime.rst:1960
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""
"Si :meth:`tzname` retourne ``None``, ``%Z`` est remplacé par une chaîne de "
"caractères vide.  Sinon ``%Z`` est remplacé par la valeur retournée, qui "
"doit être une chaîne de caractères."

#: ../Doc/library/datetime.rst:1964
msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced.  The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""
"Lorsque la directive ``%z`` est fournie à la méthode :meth:`strptime`, un "
"objet :class:`.datetime` conscient vas être créé. L'attribut ``tzinfo`` du "
"résultat sera mis à une instance de :class:`timezone`."

#: ../Doc/library/datetime.rst:1970
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the year are specified."
msgstr ""
"Lorsqu'utilisé avec la méthode :meth:`strptime`, ``%U`` et ``%W`` sont "
"utilisés uniquement dans le calcul que le jour de la semaine et l'année sont "
"spécifiés."

#: ../Doc/library/datetime.rst:1975
msgid "If, that is, we ignore the effects of Relativity"
msgstr "En ignorant les effets de la relativité"
